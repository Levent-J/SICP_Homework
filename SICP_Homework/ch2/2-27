#lang racket
(define (reverse list)
  (reverse-iter list '())
  )
(define (reverse-iter list result)
  (if (null? list)
      result
      (reverse-iter (cdr list) (cons (car list) result)))
  )
(define (deep-reverse tree)
  (cond ((empty? tree) )
        ((leaf? tree) tree)
        (else (reverse (make-tree (deep-reverse (left-branch tree))
                                  (deep-reverse (right-branch tree))))))
  )
(define (empty? tree) (null? tree))
(define (leaf? tree) (not (pair? tree)))
(define (make-tree left right) (list left right))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cdr tree))

(define t (list (list 1 2) (list 3 4)))
(reverse t)
(deep-reverse t)