#lang racket
(define (empty? tree) (null? tree))
(define (leaf? tree) (not (pair? tree)))
(define (make-tree left right) (list left right))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cdr tree))
(define (square x) (* x x))
(define (square-tree tree)
  (cond ((empty? tree) )
        ((leaf? tree) (square tree))
        (else (cons (square-tree (left-branch tree))
                    (square-tree (right-branch tree)))))
  )
(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7))
 )