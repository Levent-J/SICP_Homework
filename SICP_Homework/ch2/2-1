#lang racket
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y)))
  )
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y)))
  )
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y)))
  )
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (numer y) (denom x)))
  )
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x)))
  )
(define (make-rat x y)
  (cond ((and (> x 0) (> y 0)) (cons x y))
        ((and (< x 0) (< y 0)) (cons (- x) (- y)))
        ((and (> x 0) (< y 0)) (cons (- x) (- y)))
        (else (cons x y))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x))
  )
(define one-half (make-rat -1 2))
(define one-third (make-rat 1 -3))
(print-rat one-half)
(print-rat one-third)
(print-rat (add-rat one-half one-third))
(print-rat (sub-rat one-half one-third))
(print-rat (mul-rat one-half one-third))
(print-rat (div-rat one-half one-third))
(equal-rat? one-half one-third)