#lang racket
(define (odd? x) (= (remainder x 2) 0))
(define (same-parity . queen)
  (if (odd? (car queen))
      (odd queen '())
      (even queen '()))
  )
(define (odd list result)
  (if (null? list)
      (reverse result)
      (if (odd? (car list))
          (odd (cdr list) (cons (car list) result))
          (odd (cdr list) result)))
  )
(define (even list result)
  (if (null? list)
      (reverse result)
      (if (odd? (car list))
          (even (cdr list) result)
          (even (cdr list) (cons (car list) result))))
  )
(define (reverse list)
  (reverse-iter list '())
  )
(define (reverse-iter list result)
  (if (null? list)
      result
      (reverse-iter (cdr list) (cons (car list) result)))
  )
(same-parity 3 4 5 6 7 8 9 10)