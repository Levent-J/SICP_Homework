#lang racket
#|通过区间折半寻找方程的根|#
(define (search f neg-point pos-point)
  (let ((midpoint (average neg-point pos-point)))
  (if (close-enough? neg-point pos-point)
      midpoint
      (let ((test-valve (f midpoint)))
        (cond ((positive? test-valve) (search f neg-point midpoint))
              ((negative? test-valve) (search f midpoint pos-point))
              (else midpoint)))))
  )
(define (close-enough? x y)
  (< (abs (- x y)) 0.001)
  )
(define (abs x)
  (if (< x 0) (- x) x)
  )
(define (average x y)
  (/ (+ x y) 2)
  )
(define (positive? x)
  (> x 0)
  )
(define (negative? x)
  (< x 0)
  )
(define (half-interval-method f a b)
  (let ((a-valve (f a))
        (b-valve (f b)))
    (cond ((and (negative? a-valve) (positive? b-valve)) (search f a b))
          ((and (negative? b-valve) (positive? a-valve)) (search f b a))
          (else (display "error")))
    ))

(half-interval-method sin 2.0 4.0)