#lang racket
#|(define (expt b n)
  (if(= n 0) 1 (* b (expt b (- n 1))))
  )
(expt 3 3)
(remainder 3 2)
(remainder 5 2)
(display "hello world")|#
(define (expt b n)
  (expt-iter b n 1)
  )
(define (expt-iter b counter product)
  (cond ((= counter 0) product)
        ((even? counter) (expt-iter (square b) (/ counter 2) product))
        (else (expt-iter b (- counter 1) (* b product))))
  )
(define (square x)
  (* x x)
  )
(define (even? x)
  (= (remainder x 2) 0)
  )
(expt 2 5)